// V√≠ d·ª• s·ª≠ d·ª•ng h·ªá th·ªëng Animation
// File n√†y minh h·ªça c√°ch s·ª≠ d·ª•ng AnimationSystem trong th·ª±c t·∫ø

import { AnimationManager } from '../managers/AnimationManager.js';
import { AnimationSystem } from '../ecs/systems/AnimationSystem.js';
import { Animation } from '../ecs/components/Animation.js';

export class AnimationExample {
    constructor(scene) {
        this.scene = scene;
        this.animationManager = new AnimationManager(scene);
        this.animationSystem = new AnimationSystem(this.animationManager);
    }
    
    // ‚≠ê V√≠ d·ª• 1: T·∫°o entity v·ªõi animation
    createAnimatedSoldier(x, y) {
        const entityId = this.scene.ecsWorld.createEntity();
        
        // Th√™m c√°c components c∆° b·∫£n
        this.scene.ecsWorld.addComponent(entityId, 'position', { x, y });
        this.scene.ecsWorld.addComponent(entityId, 'velocity', { x: 0, y: 0 });
        this.scene.ecsWorld.addComponent(entityId, 'behavior', { current: 'idle' });
        this.scene.ecsWorld.addComponent(entityId, 'health', { current: 100, maximum: 100 });
        
        // ‚≠ê Th√™m Animation component
        const animation = new Animation('soldier', 'idle', 'down');
        this.scene.ecsWorld.addComponent(entityId, 'animation', animation);
        
        // T·∫°o animation state trong manager
        this.animationManager.createAnimationState(entityId, 'soldier', {});
        
        console.log(`üé¨ Created animated soldier at (${x}, ${y})`);
        return entityId;
    }
    
    // ‚≠ê V√≠ d·ª• 2: Thay ƒë·ªïi animation th·ªß c√¥ng
    makeSoldierAttack(entityId) {
        const animation = this.scene.ecsWorld.entities.get(entityId)?.get('animation');
        if (!animation) return;
        
        // Force animation attack (b·ªè qua priority)
        this.animationSystem.forceAnimation(entityId, animation, 'attack', 'right');
        console.log(`‚öîÔ∏è Soldier ${entityId} is attacking!`);
    }
    
    // ‚≠ê V√≠ d·ª• 3: Di chuy·ªÉn v·ªõi animation
    makeSoldierMove(entityId, direction) {
        const animation = this.scene.ecsWorld.entities.get(entityId)?.get('animation');
        const velocity = this.scene.ecsWorld.entities.get(entityId)?.get('velocity');
        
        if (!animation || !velocity) return;
        
        // Set velocity ƒë·ªÉ trigger move animation
        switch (direction) {
            case 'up':
                velocity.x = 0;
                velocity.y = -50;
                break;
            case 'down':
                velocity.x = 0;
                velocity.y = 50;
                break;
            case 'left':
                velocity.x = -50;
                velocity.y = 0;
                break;
            case 'right':
                velocity.x = 50;
                velocity.y = 0;
                break;
        }
        
        // C·∫≠p nh·∫≠t behavior
        const behavior = this.scene.ecsWorld.entities.get(entityId)?.get('behavior');
        if (behavior) {
            behavior.current = 'followPath';
        }
        
        console.log(`üö∂ Soldier ${entityId} moving ${direction}`);
    }
    
    // ‚≠ê V√≠ d·ª• 4: D·ª´ng animation
    stopSoldierAnimation(entityId) {
        const animation = this.scene.ecsWorld.entities.get(entityId)?.get('animation');
        if (!animation) return;
        
        this.animationSystem.stopEntityAnimation(entityId, animation);
        console.log(`üõë Stopped animation for soldier ${entityId}`);
    }
    
    // ‚≠ê V√≠ d·ª• 5: Ki·ªÉm tra tr·∫°ng th√°i animation
    checkSoldierAnimation(entityId) {
        const animInfo = this.animationSystem.getEntityAnimationInfo(entityId);
        if (animInfo) {
            console.log(`üìä Soldier ${entityId} animation info:`, animInfo);
            return animInfo;
        }
        return null;
    }
    
    // ‚≠ê V√≠ d·ª• 6: Th√™m animation v√†o queue
    queueSoldierAnimations(entityId) {
        const animation = this.scene.ecsWorld.entities.get(entityId)?.get('animation');
        if (!animation) return;
        
        // Th√™m nhi·ªÅu animations v√†o queue
        animation.queueAnimation('attack', 'right');
        animation.queueAnimation('move', 'down');
        animation.queueAnimation('attack', 'left');
        
        console.log(`üìã Queued 3 animations for soldier ${entityId}`);
        console.log(`Queue length: ${animation.animationQueue.length}`);
    }
    
    // ‚≠ê V√≠ d·ª• 7: T·∫°o custom animation config
    addCustomAnimationConfig() {
        const customConfig = {
            idle: {
                frames: 2,
                frameRate: 4,
                repeat: -1,
                key: 'custom_idle'
            },
            move: {
                frames: 4,
                frameRate: 8,
                repeat: -1,
                key: 'custom_move',
                directions: ['up', 'down', 'left', 'right']
            },
            special: {
                frames: 10,
                frameRate: 20,
                repeat: 0,
                key: 'custom_special'
            }
        };
        
        this.animationManager.addAnimationConfig('custom', customConfig);
        console.log(`‚ú® Added custom animation config`);
    }
    
    // ‚≠ê V√≠ d·ª• 8: Demo ho√†n ch·ªânh
    runAnimationDemo() {
        console.log('üé¨ Starting Animation Demo...');
        
        // T·∫°o soldiers
        const soldier1 = this.createAnimatedSoldier(100, 100);
        const soldier2 = this.createAnimatedSoldier(200, 100);
        
        // Demo 1: Idle animation (m·∫∑c ƒë·ªãnh)
        console.log('Demo 1: Idle animations');
        this.checkSoldierAnimation(soldier1);
        
        // Demo 2: Move animations
        console.log('Demo 2: Move animations');
        setTimeout(() => {
            this.makeSoldierMove(soldier1, 'right');
            this.makeSoldierMove(soldier2, 'down');
        }, 1000);
        
        // Demo 3: Attack animations
        console.log('Demo 3: Attack animations');
        setTimeout(() => {
            this.makeSoldierAttack(soldier1);
        }, 3000);
        
        // Demo 4: Animation queue
        console.log('Demo 4: Animation queue');
        setTimeout(() => {
            this.queueSoldierAnimations(soldier2);
        }, 5000);
        
        // Demo 5: Stop animations
        console.log('Demo 5: Stop animations');
        setTimeout(() => {
            this.stopSoldierAnimation(soldier1);
            this.stopSoldierAnimation(soldier2);
        }, 8000);
        
        console.log('üé¨ Animation Demo completed!');
    }
    
    // ‚≠ê V√≠ d·ª• 9: T√≠ch h·ª£p v·ªõi ECS World
    integrateWithECS(ecsWorld) {
        // Th√™m AnimationSystem v√†o ECS World
        ecsWorld.addSystem(this.animationSystem);
        
        // C·∫≠p nh·∫≠t animation m·ªói frame
        const originalUpdate = ecsWorld.update.bind(ecsWorld);
        ecsWorld.update = (deltaTime) => {
            originalUpdate(deltaTime);
            // AnimationSystem s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t
        };
        
        console.log('üîó Animation system integrated with ECS World');
    }
    
    // ‚≠ê V√≠ d·ª• 10: Debug animation system
    debugAnimationSystem() {
        console.log('üêõ Animation System Debug Info:');
        
        // L·∫•y t·∫•t c·∫£ configs
        const configs = this.animationManager.getAllConfigs();
        console.log('Available animation configs:', Array.from(configs.keys()));
        
        // L·∫•y t·∫•t c·∫£ animation states
        const states = this.animationManager.animations;
        console.log('Active animation states:', states.size);
        
        states.forEach((state, entityId) => {
            console.log(`Entity ${entityId}:`, {
                unitType: state.unitType,
                currentAnimation: state.currentAnimation,
                currentDirection: state.currentDirection,
                isPlaying: state.isPlaying
            });
        });
    }
}

// ‚≠ê Export ƒë·ªÉ s·ª≠ d·ª•ng trong DemoScene
export default AnimationExample;
