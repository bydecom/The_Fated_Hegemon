// ƒêi·ªÉm kh·ªüi ƒë·∫ßu, c·∫•u h√¨nh v√† kh·ªüi ch·∫°y game Phaser
import './style.css';
import { DemoScene } from './scenes/Demo/RTS_Demoscene.js';

// H√†m ki·ªÉm tra thi·∫øt b·ªã di ƒë·ªông
function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// H√†m l·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh t·ªëi ∆∞u
function getOptimalSize() {
    const isMobileDevice = isMobile();
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    
    if (isMobileDevice) {
        // Tr√™n mobile, ∆∞u ti√™n m√†n h√¨nh ngang
        const isLandscape = screenWidth > screenHeight;
        
        if (isLandscape) {
            // ƒê√£ ·ªü m√†n h√¨nh ngang, s·ª≠ d·ª•ng to√†n b·ªô m√†n h√¨nh
            return {
                width: screenWidth,
                height: screenHeight,
                orientation: 'landscape'
            };
        } else {
            // ·ªû m√†n h√¨nh d·ªçc, xoay ƒë·ªÉ hi·ªÉn th·ªã m√†n h√¨nh ngang
            return {
                width: screenHeight,
                height: screenWidth,
                orientation: 'portrait'
            };
        }
    } else {
        // Tr√™n desktop, s·ª≠ d·ª•ng k√≠ch th∆∞·ªõc m√†n h√¨nh hi·ªán t·∫°i
        return {
            width: screenWidth,
            height: screenHeight,
            orientation: screenWidth > screenHeight ? 'landscape' : 'portrait'
        };
    }
}

// L·∫•y k√≠ch th∆∞·ªõc t·ªëi ∆∞u
const optimalSize = getOptimalSize();

// C·∫•u h√¨nh Phaser
const config = {
    type: Phaser.AUTO,
    width: optimalSize.width,
    height: optimalSize.height,
    parent: 'app',
    backgroundColor: '#2c3e50',
    scene: [
        DemoScene
    ],
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scale: {
        mode: Phaser.Scale.RESIZE,
        autoCenter: Phaser.Scale.CENTER_BOTH,
        min: {
            width: 320,
            height: 240
        },
        max: {
            width: optimalSize.width,
            height: optimalSize.height
        }
    },
    input: {
        activePointers: 3 // H·ªó tr·ª£ ƒëa ch·∫°m
    }
};

// Kh·ªüi ch·∫°y game
const game = new Phaser.Game(config);

// X·ª≠ l√Ω xoay m√†n h√¨nh v√† resize
window.addEventListener('resize', () => {
    const newSize = getOptimalSize();
    game.scale.resize(newSize.width, newSize.height);
});

// X·ª≠ l√Ω xoay m√†n h√¨nh tr√™n mobile
window.addEventListener('orientationchange', () => {
    setTimeout(() => {
        const newSize = getOptimalSize();
        game.scale.resize(newSize.width, newSize.height);
        
        // Th√¥ng b√°o cho user xoay m√†n h√¨nh n·∫øu c·∫ßn
        if (isMobile() && newSize.orientation === 'portrait') {
            showOrientationMessage();
        }
    }, 100);
});

// H√†m hi·ªÉn th·ªã th√¥ng b√°o xoay m√†n h√¨nh
function showOrientationMessage() {
    // T·∫°o overlay th√¥ng b√°o
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        color: white;
        font-family: Arial, sans-serif;
        text-align: center;
    `;
    
    overlay.innerHTML = `
        <div>
            <h2>üîÑ Xoay m√†n h√¨nh</h2>
            <p>Vui l√≤ng xoay ƒëi·ªán tho·∫°i sang ch·∫ø ƒë·ªô ngang ƒë·ªÉ ch∆°i game t·ªët nh·∫•t</p>
            <button onclick="this.parentElement.parentElement.remove()" 
                    style="padding: 10px 20px; margin-top: 20px; background: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer;">
                ƒê√£ xoay m√†n h√¨nh
            </button>
        </div>
    `;
    
    document.body.appendChild(overlay);
    
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        if (overlay.parentElement) {
            overlay.remove();
        }
    }, 5000);
}

// Ki·ªÉm tra v√† hi·ªÉn th·ªã th√¥ng b√°o xoay m√†n h√¨nh khi kh·ªüi ƒë·ªông
if (isMobile() && optimalSize.orientation === 'portrait') {
    setTimeout(showOrientationMessage, 1000);
}

// H√†m y√™u c·∫ßu full screen
function requestFullscreen() {
    const elem = document.documentElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
        elem.msRequestFullscreen();
    }
}

// Th√™m n√∫t full screen cho mobile
if (isMobile()) {
    const fullscreenBtn = document.createElement('button');
    fullscreenBtn.innerHTML = '‚õ∂';
    fullscreenBtn.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        width: 40px;
        height: 40px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        font-size: 20px;
        cursor: pointer;
        z-index: 1000;
    `;
    fullscreenBtn.onclick = requestFullscreen;
    document.body.appendChild(fullscreenBtn);
}

// Export ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ console
window.game = game;