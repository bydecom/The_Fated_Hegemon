// SpriteSheet Manager - Qu·∫£n l√Ω sprite sheets v√† t·∫°o animations
export class SpriteSheetManager {
    constructor(scene) {
        this.scene = scene;
        this.loadedSprites = new Map(); // Cache loaded sprites
    }
    
    // ‚≠ê Load sprite sheet v√† t·∫°o animations
    loadAnimalSpriteSheet() {
        const textureKey = 'animal_sprite';
        const config = {
            frameWidth: 64,   // 384 / 6 = 64
            frameHeight: 64,  // 512 / 8 = 64
            startFrame: 0,
            endFrame: 23      // 6 frames x 4 directions - 1
        };
        
        // Load sprite sheet v·ªõi error handling
        this.scene.load.spritesheet(textureKey, 'assets/sprites/animal.png', config);
        
        // X·ª≠ l√Ω khi load th√†nh c√¥ng
        this.scene.load.once('complete', () => {
            this.createAnimalAnimations();
            console.log(`‚úÖ Animal sprite sheet loaded successfully`);
        });
        
        // X·ª≠ l√Ω khi load th·∫•t b·∫°i
        this.scene.load.once('loaderror', (file) => {
            if (file.key === textureKey) {
                console.warn(`‚ö†Ô∏è Animal sprite sheet not found, using graphics fallback`);
                // T·∫°o placeholder animations ƒë·ªÉ tr√°nh l·ªói
                this.createPlaceholderAnimations();
            }
        });
        
        console.log(`üñºÔ∏è Loading animal sprite sheet: 384x512, 6x8 frames`);
        return textureKey;
    }
    
    // ‚≠ê T·∫°o animations t·ª´ sprite sheet
    createAnimalAnimations() {
        const textureKey = 'animal_sprite';
        
        // Animal idle (s·ª≠ d·ª•ng frame ƒë·∫ßu ti√™n c·ªßa move_down)
        this.scene.anims.create({
            key: 'animal_idle',
            frames: [{ key: textureKey, frame: 0 }], // Frame ƒë·∫ßu ti√™n c·ªßa move_down
            frameRate: 1,
            repeat: -1
        });
        
        // Animal move_down (h√†ng 1: frames 0-5)
        this.scene.anims.create({
            key: 'animal_move_down',
            frames: this.scene.anims.generateFrameNumbers(textureKey, {
                start: 0,
                end: 5
            }),
            frameRate: 8,
            repeat: -1
        });
        
        // Animal move_up (h√†ng 2: frames 6-11)
        this.scene.anims.create({
            key: 'animal_move_up',
            frames: this.scene.anims.generateFrameNumbers(textureKey, {
                start: 6,
                end: 11
            }),
            frameRate: 8,
            repeat: -1
        });
        
        // Animal move_left (h√†ng 3: frames 12-17)
        this.scene.anims.create({
            key: 'animal_move_left',
            frames: this.scene.anims.generateFrameNumbers(textureKey, {
                start: 12,
                end: 17
            }),
            frameRate: 8,
            repeat: -1
        });
        
        // Animal move_right (h√†ng 4: frames 18-23)
        this.scene.anims.create({
            key: 'animal_move_right',
            frames: this.scene.anims.generateFrameNumbers(textureKey, {
                start: 18,
                end: 23
            }),
            frameRate: 8,
            repeat: -1
        });
        
        // Animal die (s·ª≠ d·ª•ng frame cu·ªëi c·ªßa move_down)
        this.scene.anims.create({
            key: 'animal_die',
            frames: [{ key: textureKey, frame: 5 }], // Frame cu·ªëi c·ªßa move_down
            frameRate: 1,
            repeat: 0
        });
        
        console.log(`üé¨ Created animal animations from sprite sheet`);
    }
    
    // ‚≠ê T·∫°o placeholder animations khi kh√¥ng c√≥ sprite sheet
    createPlaceholderAnimations() {
        // T·∫°o placeholder animations ƒë·ªÉ tr√°nh l·ªói
        // S·ª≠ d·ª•ng graphics thay v√¨ sprite
        
        // Animal idle (placeholder)
        this.scene.anims.create({
            key: 'animal_idle',
            frames: [{ key: '__WHITE', frame: 0 }], // S·ª≠ d·ª•ng texture tr·∫Øng
            frameRate: 1,
            repeat: -1
        });
        
        // Animal move animations (placeholder)
        const directions = ['down', 'up', 'left', 'right'];
        directions.forEach(direction => {
            this.scene.anims.create({
                key: `animal_move_${direction}`,
                frames: [{ key: '__WHITE', frame: 0 }],
                frameRate: 8,
                repeat: -1
            });
        });
        
        // Animal die (placeholder)
        this.scene.anims.create({
            key: 'animal_die',
            frames: [{ key: '__WHITE', frame: 0 }],
            frameRate: 1,
            repeat: 0
        });
        
        console.log(`‚ö†Ô∏è Created placeholder animations (no sprite sheet found)`);
    }
    
    // ‚≠ê T·∫°o sprite t·ª´ texture key
    createAnimalSprite(x, y) {
        const textureKey = 'animal_sprite';
        
        // T·∫°o sprite v·ªõi frame ƒë·∫ßu ti√™n
        const sprite = this.scene.add.sprite(x, y, textureKey, 0);
        sprite.setOrigin(0.5, 0.5); // Center origin
        sprite.setScale(1.0); // C√≥ th·ªÉ scale n·∫øu c·∫ßn
        
        // Play idle animation
        sprite.play('animal_idle');
        
        console.log(`üêó Created animal sprite at (${x}, ${y})`);
        return sprite;
    }
    
    // ‚≠ê C·∫≠p nh·∫≠t AnimationManager ƒë·ªÉ s·ª≠ d·ª•ng sprite thay v√¨ graphics
    updateAnimationManager(animationManager) {
        // Override method t·∫°o animation ƒë·ªÉ s·ª≠ d·ª•ng sprite
        const originalCreateAnimation = animationManager.createAnimation.bind(animationManager);
        
        animationManager.createAnimation = (animationKey, config, direction) => {
            // N·∫øu l√† animal animation, s·ª≠ d·ª•ng sprite
            if (animationKey.startsWith('animal_')) {
                this.createAnimalAnimations();
                return;
            }
            
            // C√°c animation kh√°c s·ª≠ d·ª•ng method g·ªëc
            return originalCreateAnimation(animationKey, config, direction);
        };
        
        // Override method getTextureKey
        const originalGetTextureKey = animationManager.getTextureKey.bind(animationManager);
        
        animationManager.getTextureKey = (animationKey) => {
            if (animationKey.startsWith('animal_')) {
                return 'animal_sprite';
            }
            return originalGetTextureKey(animationKey);
        };
        
        console.log(`üîó Updated AnimationManager for sprite-based animations`);
    }
    
    // ‚≠ê Load t·∫•t c·∫£ sprite sheets
    loadAllSpriteSheets() {
        const promises = [];
        
        // Load animal sprite sheet
        const animalPromise = new Promise((resolve) => {
            this.scene.load.once('complete', () => {
                this.createAnimalAnimations();
                resolve();
            });
            this.loadAnimalSpriteSheet();
            this.scene.load.start();
        });
        
        promises.push(animalPromise);
        
        return Promise.all(promises);
    }
    
    // ‚≠ê L·∫•y sprite t·ª´ entity
    getEntitySprite(entityId) {
        // T√¨m sprite trong container c·ªßa entity
        const container = this.scene.renderSystem?.containers?.get(entityId);
        if (container && container.body) {
            return container.body;
        }
        return null;
    }
    
    // ‚≠ê C·∫≠p nh·∫≠t sprite animation
    updateSpriteAnimation(entityId, animationKey) {
        const sprite = this.getEntitySprite(entityId);
        if (sprite && sprite.play) {
            sprite.play(animationKey);
            console.log(`üé¨ Playing ${animationKey} on entity ${entityId}`);
        }
    }
    
    // ‚≠ê D·ª´ng sprite animation
    stopSpriteAnimation(entityId) {
        const sprite = this.getEntitySprite(entityId);
        if (sprite && sprite.stop) {
            sprite.stop();
            console.log(`üõë Stopped animation on entity ${entityId}`);
        }
    }
    
    // ‚≠ê Ki·ªÉm tra animation c√≥ t·ªìn t·∫°i kh√¥ng
    hasAnimation(animationKey) {
        return this.scene.anims.exists(animationKey);
    }
    
    // ‚≠ê L·∫•y danh s√°ch animations
    getAvailableAnimations() {
        const animations = [];
        this.scene.anims.anims.entries.forEach((anim, key) => {
            animations.push(key);
        });
        return animations;
    }
    
    // ‚≠ê Debug: In th√¥ng tin sprite sheet
    debugSpriteSheet(textureKey = 'animal_sprite') {
        const texture = this.scene.textures.get(textureKey);
        if (texture) {
            console.log(`üêõ Sprite Sheet Debug - ${textureKey}:`);
            console.log(`  - Source: ${texture.source[0].src}`);
            console.log(`  - Frame count: ${texture.frameTotal}`);
            console.log(`  - Frame size: ${texture.source[0].width / 6}x${texture.source[0].height / 8}`);
        } else {
            console.log(`‚ùå Texture ${textureKey} not found`);
        }
    }
}
