import { ResourceNode } from '../../../entities/components/resources/ResourceNode.js';
import { Harvester } from '../../../entities/components/units/Harvester.js';
import { ResourceStorage } from '../../../entities/components/resources/ResourceStorage.js';

export class HarvestSystem {
    constructor(scene, resourceManager) {
        this.scene = scene;
        this.resourceManager = resourceManager;
    }

    update(deltaTime, entities) {
        for (const [entityId, components] of entities) {
            // X·ª≠ l√Ω thu ho·∫°ch cho ƒë∆°n v·ªã c√≥ Harvester
            if (components.has('harvester')) {
                this.processHarvester(entityId, components, entities, deltaTime);
            }

            // X·ª≠ l√Ω t√†i nguy√™n b·ªã c·∫°n ki·ªát
            if (components.has('resourceNode')) {
                this.processResourceNode(entityId, components);
            }
        }
    }

    processHarvester(entityId, components, allEntities, deltaTime) {
        const harvester = components.get('harvester');
        const position = components.get('position');
        const behavior = components.get('behavior');
        const appearance = components.get('appearance');

        if (!position || !behavior || !appearance) return;

        // N·∫øu ƒëang thu ho·∫°ch
        if (harvester.isHarvesting && harvester.targetResourceId) {
            const targetEntity = allEntities.get(harvester.targetResourceId);
            if (!targetEntity) {
                harvester.stopHarvesting();
                return;
            }

            const targetComponents = targetEntity;
            const targetPosition = targetComponents.get('position');
            const targetResource = targetComponents.get('resourceNode');

            if (!targetPosition || !targetResource) {
                harvester.stopHarvesting();
                return;
            }

            // Ki·ªÉm tra kho·∫£ng c√°ch
            const centerDistance = Math.sqrt(
                Math.pow(position.x - targetPosition.x, 2) + 
                Math.pow(position.y - targetPosition.y, 2)
            );
            
            // ‚≠ê T√≠nh kho·∫£ng c√°ch t·ª´ M√âP (edge-to-edge)
            const targetAppearance = targetComponents.get('appearance');
            const harvesterSize = appearance ? appearance.size : 10;
            const resourceSize = targetAppearance ? targetAppearance.size : 10;
            const edgeDistance = centerDistance - harvesterSize - resourceSize;

            if (edgeDistance > harvester.harvestRange) {
                // Qu√° xa, d·ª´ng thu ho·∫°ch
                harvester.stopHarvesting();
                return;
            }

            // Ki·ªÉm tra kho ƒë√£ ƒë·∫ßy ch∆∞a
            if (harvester.isFull()) {
                harvester.stopHarvesting();
                behavior.setBehavior('idle');
                return;
            }

            // Ki·ªÉm tra t√†i nguy√™n c√≤n kh√¥ng
            if (!targetResource.hasResources()) {
                harvester.stopHarvesting();
                return;
            }

            // Thu ho·∫°ch
            harvester.harvestTimer += deltaTime;
            if (harvester.harvestTimer >= harvester.harvestInterval) {
                // ‚≠ê Thu ho·∫°ch 1 gi√¢y ƒë·∫ßy ƒë·ªß (harvestInterval = 1000ms = 1 gi√¢y)
                const harvestDuration = harvester.harvestInterval / 1000; // 1 gi√¢y
                const harvested = targetResource.harvest(harvestDuration);
                
                if (harvested > 0) {
                    // ‚≠ê C·ªòNG TR·ª∞C TI·∫æP V√ÄO RESOURCE MANAGER
                    this.resourceManager.addResource(targetResource.resourceType, harvested);
                    
                    // ‚≠ê C·∫¨P NH·∫¨T UI
                    if (this.scene.uiScene) {
                        this.scene.uiScene.updateResourceDisplay(this.resourceManager);
                    }
                    
                    // ‚≠ê HI·ªÇN th·ªã floating text
                    this.showHarvestText(position, targetResource.resourceType, harvested);
                    
                    console.log(`üåæ ${entityId} thu ho·∫°ch ${harvested.toFixed(1)} ${targetResource.resourceType}`);
                }
                harvester.harvestTimer = 0;
            }

            // D·ª´ng di chuy·ªÉn khi thu ho·∫°ch
            const velocity = components.get('velocity');
            if (velocity) {
                velocity.x = 0;
                velocity.y = 0;
            }

        } else if (behavior.type === 'harvest') {
            // T√¨m t√†i nguy√™n g·∫ßn nh·∫•t ƒë·ªÉ thu ho·∫°ch (t√¨m trong ph·∫°m vi r·ªông h∆°n)
            const searchRange = harvester.harvestRange * 3; // T√¨m trong ph·∫°m vi 3x harvestRange
            const nearestResource = this.findNearestResource(position, allEntities, searchRange);
            if (nearestResource) {
                harvester.startHarvesting(nearestResource);
                console.log(`üéØ ${entityId} b·∫Øt ƒë·∫ßu thu ho·∫°ch ${nearestResource}`);
            } else {
                console.log(`‚ùå ${entityId} kh√¥ng t√¨m th·∫•y t√†i nguy√™n trong ph·∫°m vi ${searchRange}`);
                behavior.setBehavior('idle');
            }
        }
    }

    processResourceNode(entityId, components) {
        const resourceNode = components.get('resourceNode');
        const appearance = components.get('appearance');

        if (!resourceNode || !appearance) return;

        // N·∫øu t√†i nguy√™n c·∫°n ki·ªát, ·∫©n ho·∫∑c x√≥a
        if (resourceNode.isDepleted) {
            // C√≥ th·ªÉ thay ƒë·ªïi m√†u s·∫Øc ho·∫∑c ·∫©n
            if (appearance.color) {
                appearance.color = 0x666666; // M√†u x√°m khi c·∫°n ki·ªát
            }
            appearance.alpha = 0.3; // L√†m m·ªù
        }
    }

    findNearestResource(position, allEntities, maxRange) {
        let nearestId = null;
        let nearestDistance = maxRange;

        for (const [entityId, components] of allEntities) {
            if (!components.has('resourceNode')) continue;

            const targetPosition = components.get('position');
            if (!targetPosition) continue;

            const distance = Math.sqrt(
                Math.pow(position.x - targetPosition.x, 2) + 
                Math.pow(position.y - targetPosition.y, 2)
            );

            if (distance < nearestDistance) {
                const resourceNode = components.get('resourceNode');
                if (resourceNode && resourceNode.hasResources()) {
                    nearestId = entityId;
                    nearestDistance = distance;
                }
            }
        }

        return nearestId;
    }

    // L·ªánh thu ho·∫°ch cho ƒë∆°n v·ªã
    commandHarvest(entityId, entities) {
        const components = entities.get(entityId);
        if (!components) return false;

        const behavior = components.get('behavior');
        const harvester = components.get('harvester');

        if (!behavior || !harvester) return false;

        behavior.setBehavior('harvest');
        return true;
    }

    // L·ªánh giao n·ªôp t√†i nguy√™n
    commandDeposit(entityId, entities) {
        const components = entities.get(entityId);
        if (!components) return false;

        const harvester = components.get('harvester');
        if (!harvester || harvester.currentLoad === 0) return false;

        // Giao n·ªôp t√†i nguy√™n v√†o ResourceManager
        const resources = this.getCarriedResources(harvester);
        for (const [resourceType, amount] of Object.entries(resources)) {
            this.resourceManager.addResource(resourceType, amount);
        }

        // L√†m tr·ªëng kho
        harvester.emptyLoad();
        console.log(`üì¶ ${entityId} giao n·ªôp t√†i nguy√™n:`, resources);
        return true;
    }

    getCarriedResources(harvester) {
        // T·∫°m th·ªùi tr·∫£ v·ªÅ t√†i nguy√™n m·∫∑c ƒë·ªãnh
        // Trong th·ª±c t·∫ø c·∫ßn l∆∞u lo·∫°i t√†i nguy√™n ƒëang mang
        return {
            wood: harvester.currentLoad
        };
    }

    // ‚≠ê Hi·ªÉn th·ªã floating text khi thu ho·∫°ch
    showHarvestText(position, resourceType, amount) {
        if (!this.scene) return;

        // M√†u s·∫Øc t√πy theo lo·∫°i t√†i nguy√™n
        const resourceColors = {
            'wood': '#8B4513',   // N√¢u
            'gold': '#FFD700',   // V√†ng
            'silver': '#C0C0C0', // X√°m b·∫°c
            'stone': '#808080',  // X√°m ƒë√°
            'water': '#1E90FF',  // Xanh n∆∞·ªõc
            'meat': '#D2691E'    // N√¢u ƒë·ªè
        };

        const color = resourceColors[resourceType] || '#00ff00';
        const text = `+${Math.round(amount)}`;

        // T·∫°o text object
        const floatingText = this.scene.add.text(position.x, position.y - 30, text, {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: color,
            fontStyle: 'bold',
            stroke: '#000000',
            strokeThickness: 3
        });
        floatingText.setDepth(1001);
        floatingText.setOrigin(0.5, 0.5);

        // Animation: bay l√™n v√† m·ªù d·∫ßn
        this.scene.tweens.add({
            targets: floatingText,
            y: position.y - 60,
            alpha: 0,
            duration: 1000,
            ease: 'Power2',
            onComplete: () => {
                floatingText.destroy();
            }
        });
    }
}
