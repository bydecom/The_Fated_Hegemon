// Factory ƒë·ªÉ t·∫°o c√°c entity v·ªõi h√†nh vi kh√°c nhau
import { Position } from './components/Position.js';
import { Velocity } from './components/Velocity.js';
import { Health } from './components/Health.js';
import { Behavior } from './components/Behavior.js';
import { Appearance } from './components/Appearance.js';
import { AI } from './components/AI.js';
import { Selectable } from './components/Selectable.js';
import { PlayerUnit } from './components/PlayerUnit.js';
import { Building } from './components/Building.js';
import { CombatStats } from './components/CombatStats.js';
import { Faction } from './components/Faction.js'; // ‚≠ê NEW: Faction component
import { ResourceNode } from './components/ResourceNode.js'; // ‚≠ê NEW: Resource management
import { Harvester } from './components/Harvester.js';
import { ResourceStorage } from './components/ResourceStorage.js';
import { EntityType } from './components/EntityType.js'; // ‚≠ê NEW: Entity type classification
import { ClickBehavior, ClickBehaviorFactory } from './components/ClickBehavior.js'; // ‚≠ê NEW: Click behavior management
import { CombatResponse } from './components/CombatResponse.js'; // ‚≠ê NEW: Combat response management
import { Animation } from './components/Animation.js'; // ‚≠ê NEW: Animation component


export class EntityFactory {
    constructor(ecsWorld, factionManager = null) {
        this.ecsWorld = ecsWorld;
        this.factionManager = factionManager; // ‚≠ê Tham chi·∫øu ƒë·∫øn FactionManager
    }
    
    createPlayerSoldier(x, y) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity());
        this.ecsWorld.addComponent(entityId, 'health', new Health(100, 100));
        this.ecsWorld.addComponent(entityId, 'combatStats', new CombatStats(20, 50, 1000));
        this.ecsWorld.addComponent(entityId, 'appearance', new Appearance(0x00ff00, 12, 'circle')); // Green circle
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('idle'));
        this.ecsWorld.addComponent(entityId, 'ai', new AI('idle', { speed: 150 })); // AI for pathfinding speed etc.
        this.ecsWorld.addComponent(entityId, 'selectable', new Selectable()); // Can be selected
        this.ecsWorld.addComponent(entityId, 'playerUnit', new PlayerUnit()); // Belongs to player
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('unit')); // ‚≠ê NEW: Unit type
        this.ecsWorld.addComponent(entityId, 'clickBehavior', ClickBehaviorFactory.createSoldierBehavior()); // ‚≠ê NEW: Click behavior
        this.ecsWorld.addComponent(entityId, 'combatResponse', new CombatResponse({ chaseRange: 200, maxChaseDistance: 300 })); // ‚≠ê NEW: Combat response
        this.ecsWorld.addComponent(entityId, 'animation', new Animation('soldier', 'idle', 'down')); // ‚≠ê NEW: Animation
        
        return entityId;
    }
    
    createEnemySoldier(x, y) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity());
        this.ecsWorld.addComponent(entityId, 'health', new Health(50, 50));
        this.ecsWorld.addComponent(entityId, 'combatStats', new CombatStats(10, 50, 1500));
        const enemyAppearance = new Appearance(0xff0000, 10, 'triangle');
        enemyAppearance.setWeapon({ type: null });
        enemyAppearance.hasArms = false; // ‚≠ê S·ª¨A: Di chuy·ªÉn d√≤ng n√†y xu·ªëng sau khi t·∫°o appearance
        this.ecsWorld.addComponent(entityId, 'appearance', enemyAppearance); // Red triangle, no weapon
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('wander', { speed: 40, interval: 3000 }));
        this.ecsWorld.addComponent(entityId, 'ai', new AI('wander'));
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('unit')); // ‚≠ê NEW: Unit type
        this.ecsWorld.addComponent(entityId, 'clickBehavior', ClickBehaviorFactory.createEnemyBehavior()); // ‚≠ê NEW: Click behavior
        this.ecsWorld.addComponent(entityId, 'combatResponse', new CombatResponse({ chaseRange: 150, maxChaseDistance: 250 })); // ‚≠ê NEW: Combat response
        this.ecsWorld.addComponent(entityId, 'animation', new Animation('soldier', 'idle', 'down')); // ‚≠ê NEW: Animation
        
        return entityId;
    }

    createChaserEnemy(x, y) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity());
        this.ecsWorld.addComponent(entityId, 'health', new Health(50, 50));
        this.ecsWorld.addComponent(entityId, 'combatStats', new CombatStats(10, 50, 1000));
        // Giao di·ªán: Ch·∫•m tr√≤n ƒë·ªè
        const chaserAppearance = new Appearance(0xff0000, 10, 'circle');
        this.ecsWorld.addComponent(entityId, 'appearance', chaserAppearance); 
        // H√†nh vi ban ƒë·∫ßu l√† lang thang
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('wander', { speed: 40, interval: 3000 }));
        // AI: Lo·∫°i 'chase' v·ªõi t·ªëc ƒë·ªô ch·∫≠m h∆°n v√† c√≥ t·∫ßm nh√¨n
        this.ecsWorld.addComponent(entityId, 'ai', new AI('chase', {
            speed: 90,             // T·ªëc ƒë·ªô 90 (ch·∫≠m h∆°n l√≠nh c·ªßa b·∫°n l√† 150)
            detectionRange: 350,   // T·∫ßm nh√¨n 350 pixels
            reactionTime: 500      // Ra quy·∫øt ƒë·ªãnh m·ªói 0.5 gi√¢y
        }));
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('unit')); // ‚≠ê NEW: Unit type
        this.ecsWorld.addComponent(entityId, 'clickBehavior', ClickBehaviorFactory.createEnemyBehavior()); // ‚≠ê NEW: Click behavior
        this.ecsWorld.addComponent(entityId, 'combatResponse', new CombatResponse({ chaseRange: 180, maxChaseDistance: 280 })); // ‚≠ê NEW: Combat response
        this.ecsWorld.addComponent(entityId, 'animation', new Animation('soldier', 'idle', 'down')); // ‚≠ê NEW: Animation
        
        return entityId;
    }

    createHarvesterUnit(x, y) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity());
        this.ecsWorld.addComponent(entityId, 'health', new Health(80, 80));
        
        // ‚≠ê Combat stats cho d√¢n thu ho·∫°ch (damage th·∫•p h∆°n l√≠nh)
        this.ecsWorld.addComponent(entityId, 'combatStats', new CombatStats(8, 40, 1200)); // 8 damage, 40 range, 1.2s cooldown
        
        // ‚≠ê Appearance v·ªõi v≈© kh√≠ ng·∫Øn cho d√¢n thu ho·∫°ch
        const harvesterAppearance = new Appearance(0x00AAFF, 14, 'circle'); // M√†u xanh d∆∞∆°ng
        harvesterAppearance.setWeapon({ 
            type: 'short_stick', 
            offsetX: -5,  // Ng·∫Øn h∆°n l√≠nh
            offsetY: 15  // Th·∫•p h∆°n l√≠nh
        });
        this.ecsWorld.addComponent(entityId, 'appearance', harvesterAppearance);
        
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('idle'));
        this.ecsWorld.addComponent(entityId, 'ai', new AI('idle', { speed: 120 }));
        this.ecsWorld.addComponent(entityId, 'selectable', new Selectable());
        this.ecsWorld.addComponent(entityId, 'playerUnit', new PlayerUnit());
        this.ecsWorld.addComponent(entityId, 'harvester', new Harvester(100, 30)); // S·ª©c ch·ª©a 100, t·∫ßm 30
        this.ecsWorld.addComponent(entityId, 'resourceStorage', new ResourceStorage());
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('unit')); // ‚≠ê NEW: Unit type
        this.ecsWorld.addComponent(entityId, 'clickBehavior', ClickBehaviorFactory.createHarvesterBehavior()); // ‚≠ê NEW: Click behavior
        this.ecsWorld.addComponent(entityId, 'combatResponse', new CombatResponse({ chaseRange: 120, maxChaseDistance: 200, retreatDistance: 100 })); // ‚≠ê NEW: Combat response
        this.ecsWorld.addComponent(entityId, 'animation', new Animation('harvester', 'idle', 'down')); // ‚≠ê NEW: Animation
        
        console.log(`üåæ Created harvester unit at (${x}, ${y})`);
        return entityId;
    }

    // ‚≠ê T·∫†O NH√Ä CH√çNH C·ª¶A PLAYER
    createPlayerBase(x, y) {
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const buildingSizeInTiles = 3; // Nh√† 3x3 √¥ (gi·ªëng enemy building)
        
        // ‚≠ê Chuy·ªÉn ƒë·ªïi t·ª´ world coordinates sang grid coordinates
        const gridX = Math.floor(x / tileSize);
        const gridY = Math.floor(y / tileSize);
        
        // T√≠nh to√°n world position ·ªü t√¢m building
        const buildingPixelSize = buildingSizeInTiles * tileSize;
        const worldX = gridX * tileSize + buildingPixelSize / 2;
        const worldY = gridY * tileSize + buildingPixelSize / 2;
        
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(worldX, worldY));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity(0, 0)); // ƒê·ª©ng y√™n
        this.ecsWorld.addComponent(entityId, 'health', new Health(1000, 1000)); // 1000 HP
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('idle')); // C·∫ßn behavior
        this.ecsWorld.addComponent(entityId, 'ai', new AI('idle', { speed: 0 })); // C·∫ßn AI (speed=0)
        
        // ‚≠ê Appearance: H√¨nh vu√¥ng m√†u xanh l√°
        const baseAppearance = new Appearance(0x00FF00, buildingPixelSize / 2, 'square'); // Size theo building
        baseAppearance.setWeapon({ type: null }); // Kh√¥ng c√≥ v≈© kh√≠
        baseAppearance.hasArms = false; // Kh√¥ng c√≥ tay
        this.ecsWorld.addComponent(entityId, 'appearance', baseAppearance);
        
        this.ecsWorld.addComponent(entityId, 'building', new Building()); // L√† building
        this.ecsWorld.addComponent(entityId, 'selectable', new Selectable()); // C√≥ th·ªÉ ch·ªçn
        this.ecsWorld.addComponent(entityId, 'playerUnit', new PlayerUnit()); // Thu·ªôc v·ªÅ player
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('building')); // ‚≠ê NEW: Building type
        
        // ‚≠ê QUAN TR·ªåNG: ƒê√°nh d·∫•u grid (gi·ªëng enemy building)
        for (let x = gridX; x < gridX + buildingSizeInTiles; x++) {
            for (let y = gridY; y < gridY + buildingSizeInTiles; y++) {
                this.ecsWorld.scene.gridManager.setTileOccupied(x, y, entityId);
            }
        }
        
        // ‚≠ê C·∫≠p nh·∫≠t pathfinding grid
        if (this.ecsWorld.scene.pathfindingManager) {
            this.ecsWorld.scene.pathfindingManager.updateGrid();
        }
        
        console.log(`üè† Created player base at (${worldX}, ${worldY}), grid (${gridX}, ${gridY}), ID: ${entityId}`);
        return entityId;
    }
    // ‚≠ê CODE L·∫†I HO√ÄN TO√ÄN: T·∫°o enemy building
    createEnemyBuilding(gridX, gridY) {
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const buildingSizeInTiles = 3; // Nh√† 3x3 √¥
        const buildingPixelSize = buildingSizeInTiles * tileSize;

        // T·ªça ƒë·ªô t√¢m building
        const worldX = gridX * tileSize + buildingPixelSize / 2;
        const worldY = gridY * tileSize + buildingPixelSize / 2;
        
        const entityId = this.ecsWorld.createEntity();

        // ‚≠ê C√ÅC COMPONENT C∆† B·∫¢N (gi·ªëng unit)
        this.ecsWorld.addComponent(entityId, 'position', new Position(worldX, worldY));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity(0, 0)); // ƒê·ª©ng y√™n
        this.ecsWorld.addComponent(entityId, 'health', new Health(500, 500)); // 500 HP
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('idle')); // ‚≠ê C·∫¶N behavior
        this.ecsWorld.addComponent(entityId, 'ai', new AI('idle', { speed: 0 })); // ‚≠ê C·∫¶N AI (speed=0)
        
        // Appearance
        const buildingAppearance = new Appearance(0xcc0000, buildingPixelSize / 2, 'rectangle');
        buildingAppearance.setWeapon({ type: null });
        this.ecsWorld.addComponent(entityId, 'appearance', buildingAppearance);

        // ƒê√°nh d·∫•u l√† building
        this.ecsWorld.addComponent(entityId, 'building', new Building());
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('building')); // ‚≠ê NEW: Building type

        // ƒê√°nh d·∫•u grid
        for (let x = gridX; x < gridX + buildingSizeInTiles; x++) {
            for (let y = gridY; y < gridY + buildingSizeInTiles; y++) {
                this.ecsWorld.scene.gridManager.setTileOccupied(x, y, entityId);
            }
        }
        
        if (this.ecsWorld.scene.pathfindingManager) {
            this.ecsWorld.scene.pathfindingManager.updateGrid();
        }
        
        console.log(`üèóÔ∏è Created building at (${worldX}, ${worldY}) with ID: ${entityId}`);
        return entityId;
    }

    // ‚≠ê NEW: T·∫°o unit v·ªõi faction (√°p d·ª•ng race + tribe modifiers)
    createUnitWithFaction(x, y, raceId, tribeId, unitConfig = {}) {
        const entityId = this.ecsWorld.createEntity();
        
        // Base stats
        const baseStats = {
            health: unitConfig.baseHealth || 100,
            damage: unitConfig.baseDamage || 20,
            speed: unitConfig.baseSpeed || 150,
            attackRange: unitConfig.baseAttackRange || 50,
            attackRate: unitConfig.baseAttackRate || 1000
        };
        
        // ‚≠ê T√≠nh to√°n final stats d·ª±a tr√™n race + tribe modifiers
        let finalStats = baseStats;
        if (this.factionManager) {
            finalStats = this.factionManager.calculateFinalStats(baseStats, raceId, tribeId);
        }
        
        // L·∫•y th√¥ng tin tribe ƒë·ªÉ l·∫•y m√†u
        const tribe = this.factionManager ? this.factionManager.getTribe(tribeId) : null;
        const color = tribe ? tribe.color : (unitConfig.color || 0x00ff00);
        
        // Th√™m components
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity());
        this.ecsWorld.addComponent(entityId, 'health', new Health(finalStats.health, finalStats.health));
        this.ecsWorld.addComponent(entityId, 'combatStats', new CombatStats(
            finalStats.damage,
            finalStats.attackRange,
            finalStats.attackRate
        ));
        
        // Appearance
        const appearance = new Appearance(color, unitConfig.size || 12, unitConfig.shape || 'circle');
        if (unitConfig.weapon) {
            appearance.setWeapon(unitConfig.weapon);
        }
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        
        // Behavior & AI
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior(unitConfig.behavior || 'idle'));
        this.ecsWorld.addComponent(entityId, 'ai', new AI(unitConfig.aiType || 'idle', { speed: finalStats.speed }));
        
        // ‚≠ê Faction
        this.ecsWorld.addComponent(entityId, 'faction', new Faction(raceId, tribeId));
        
        // Optional: Selectable
        if (unitConfig.selectable) {
            this.ecsWorld.addComponent(entityId, 'selectable', new Selectable());
        }
        
        // Optional: PlayerUnit
        if (unitConfig.isPlayerUnit) {
            this.ecsWorld.addComponent(entityId, 'playerUnit', new PlayerUnit());
        }
        
        return entityId;
    }

    // ‚≠ê NEW: T·∫°o building v·ªõi faction
    createBuildingWithFaction(gridX, gridY, raceId, tribeId, buildingConfig = {}) {
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const buildingSizeInTiles = buildingConfig.sizeInTiles || 3;
        const buildingPixelSize = buildingSizeInTiles * tileSize;
        
        const worldX = gridX * tileSize + buildingPixelSize / 2;
        const worldY = gridY * tileSize + buildingPixelSize / 2;
        
        const entityId = this.ecsWorld.createEntity();
        
        // Base stats
        const baseStats = {
            health: buildingConfig.baseHealth || 500,
            damage: 0,
            speed: 0,
            attackRange: 0,
            attackRate: 0
        };
        
        // Apply modifiers
        let finalStats = baseStats;
        if (this.factionManager) {
            finalStats = this.factionManager.calculateFinalStats(baseStats, raceId, tribeId);
        }
        
        // L·∫•y m√†u t·ª´ tribe
        const tribe = this.factionManager ? this.factionManager.getTribe(tribeId) : null;
        const color = tribe ? tribe.color : (buildingConfig.color || 0xcc0000);
        
        // Components
        this.ecsWorld.addComponent(entityId, 'position', new Position(worldX, worldY));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity(0, 0));
        this.ecsWorld.addComponent(entityId, 'health', new Health(finalStats.health, finalStats.health));
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('idle'));
        this.ecsWorld.addComponent(entityId, 'ai', new AI('idle', { speed: 0 }));
        
        const buildingAppearance = new Appearance(color, buildingPixelSize / 2, 'rectangle');
        buildingAppearance.setWeapon({ type: null });
        this.ecsWorld.addComponent(entityId, 'appearance', buildingAppearance);
        
        this.ecsWorld.addComponent(entityId, 'building', new Building());
        this.ecsWorld.addComponent(entityId, 'faction', new Faction(raceId, tribeId));
        
        // ƒê√°nh d·∫•u grid
        for (let x = gridX; x < gridX + buildingSizeInTiles; x++) {
            for (let y = gridY; y < gridY + buildingSizeInTiles; y++) {
                this.ecsWorld.scene.gridManager.setTileOccupied(x, y, entityId);
            }
        }
        
        if (this.ecsWorld.scene.pathfindingManager) {
            this.ecsWorld.scene.pathfindingManager.updateGrid();
        }
        
        console.log(`üèóÔ∏è Created ${tribe ? tribe.name : 'Unknown'} building at (${worldX}, ${worldY})`);
        return entityId;
    }

    // ‚≠ê T·∫†O C√ÅC LO·∫†I T√ÄI NGUY√äN
    createTree(x, y, woodAmount = 1000) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        const appearance = new Appearance(0x228B22, 20, 'circle'); // M√†u xanh l√°
        appearance.setWeapon({ type: null }); // ‚≠ê KH√îNG C√ì V≈® KH√ç
        appearance.hasArms = false; // ‚≠ê KH√îNG C√ì TAY
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        this.ecsWorld.addComponent(entityId, 'resourceNode', new ResourceNode('wood', woodAmount, 2)); // 2 g·ªó/gi√¢y
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('resource')); // ‚≠ê NEW: Resource type
        
        // ‚≠ê ƒê√°nh d·∫•u grid (c√¢y chi·∫øm 1 √¥)
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const gridX = Math.floor(x / tileSize);
        const gridY = Math.floor(y / tileSize);
        this.ecsWorld.scene.gridManager.setTileOccupied(gridX, gridY, entityId);
        
        console.log(`üå≤ Created tree at (${x}, ${y}) with ${woodAmount} wood`);
        return entityId;
    }

    createGoldMine(x, y, goldAmount = 500) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        const appearance = new Appearance(0xFFD700, 25, 'square'); // H√¨nh vu√¥ng v√†ng
        appearance.setWeapon({ type: null }); // ‚≠ê KH√îNG C√ì V≈® KH√ç
        appearance.hasArms = false; // ‚≠ê KH√îNG C√ì TAY
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        this.ecsWorld.addComponent(entityId, 'resourceNode', new ResourceNode('gold', goldAmount, 1)); // 1 v√†ng/gi√¢y
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('resource'));
        
        // ‚≠ê ƒê√°nh d·∫•u grid (m·ªè v√†ng chi·∫øm 1 √¥)
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const gridX = Math.floor(x / tileSize);
        const gridY = Math.floor(y / tileSize);
        this.ecsWorld.scene.gridManager.setTileOccupied(gridX, gridY, entityId);
        
        console.log(`üí∞ Created gold mine at (${x}, ${y}) with ${goldAmount} gold`);
        return entityId;
    }

    createSilverMine(x, y, silverAmount = 300) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        const appearance = new Appearance(0xC0C0C0, 25, 'square'); // H√¨nh vu√¥ng x√°m
        appearance.setWeapon({ type: null }); // ‚≠ê KH√îNG C√ì V≈® KH√ç
        appearance.hasArms = false; // ‚≠ê KH√îNG C√ì TAY
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        this.ecsWorld.addComponent(entityId, 'resourceNode', new ResourceNode('silver', silverAmount, 1.5)); // 1.5 b·∫°c/gi√¢y
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('resource'));
        
        // ‚≠ê ƒê√°nh d·∫•u grid (m·ªè b·∫°c chi·∫øm 1 √¥)
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const gridX = Math.floor(x / tileSize);
        const gridY = Math.floor(y / tileSize);
        this.ecsWorld.scene.gridManager.setTileOccupied(gridX, gridY, entityId);
        
        console.log(`‚ö™ Created silver mine at (${x}, ${y}) with ${silverAmount} silver`);
        return entityId;
    }

    createStoneMine(x, y, stoneAmount = 800) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        const appearance = new Appearance(0x8B4513, 25, 'square'); // H√¨nh vu√¥ng n√¢u
        appearance.setWeapon({ type: null }); // ‚≠ê KH√îNG C√ì V≈® KH√ç
        appearance.hasArms = false; // ‚≠ê KH√îNG C√ì TAY
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        this.ecsWorld.addComponent(entityId, 'resourceNode', new ResourceNode('stone', stoneAmount, 2.5)); // 2.5 ƒë√°/gi√¢y
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('resource'));
        
        // ‚≠ê ƒê√°nh d·∫•u grid (m·ªè ƒë√° chi·∫øm 1 √¥)
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const gridX = Math.floor(x / tileSize);
        const gridY = Math.floor(y / tileSize);
        this.ecsWorld.scene.gridManager.setTileOccupied(gridX, gridY, entityId);
        
        console.log(`üß± Created stone mine at (${x}, ${y}) with ${stoneAmount} stone`);
        return entityId;
    }

    createWaterSource(x, y, waterAmount = 400) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        const appearance = new Appearance(0x1E90FF, 20, 'circle'); // H√¨nh tr√≤n xanh
        appearance.setWeapon({ type: null }); // ‚≠ê KH√îNG C√ì V≈® KH√ç
        appearance.hasArms = false; // ‚≠ê KH√îNG C√ì TAY
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        this.ecsWorld.addComponent(entityId, 'resourceNode', new ResourceNode('water', waterAmount, 3)); // 3 n∆∞·ªõc/gi√¢y
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('resource'));
        
        // ‚≠ê ƒê√°nh d·∫•u grid (ngu·ªìn n∆∞·ªõc chi·∫øm 1 √¥)
        const tileSize = this.ecsWorld.scene.gridManager.tileSize;
        const gridX = Math.floor(x / tileSize);
        const gridY = Math.floor(y / tileSize);
        this.ecsWorld.scene.gridManager.setTileOccupied(gridX, gridY, entityId);
        
        console.log(`üíß Created water source at (${x}, ${y}) with ${waterAmount} water`);
        return entityId;
    }

    createAnimal(x, y, meatAmount = 200) {
        const entityId = this.ecsWorld.createEntity();
        
        this.ecsWorld.addComponent(entityId, 'position', new Position(x, y));
        this.ecsWorld.addComponent(entityId, 'velocity', new Velocity());
        
        // ‚≠ê NEW: S·ª≠ d·ª•ng sprite cho animal
        const appearance = new Appearance(0x2F2F2F, 32, 'circle'); // Size 32 ƒë·ªÉ ph√π h·ª£p v·ªõi sprite
        appearance.setWeapon({ type: null }); // ‚≠ê KH√îNG C√ì V≈® KH√ç
        appearance.hasArms = false; // ‚≠ê KH√îNG C√ì TAY (ƒë·ªông v·∫≠t kh√¥ng c√≥ tay)
        appearance.setSprite('animal_sprite', true); // ‚≠ê S·ª¨ D·ª§NG SPRITE
        this.ecsWorld.addComponent(entityId, 'appearance', appearance);
        this.ecsWorld.addComponent(entityId, 'health', new Health(100, 100)); // ‚≠ê C√≥ th·ªÉ gi·∫øt ƒë·ªÉ l·∫•y th·ªãt
        this.ecsWorld.addComponent(entityId, 'resourceNode', new ResourceNode('meat', meatAmount, 1));
        this.ecsWorld.addComponent(entityId, 'behavior', new Behavior('wander', { speed: 30, interval: 2000 }));
        this.ecsWorld.addComponent(entityId, 'ai', new AI('wander'));
        this.ecsWorld.addComponent(entityId, 'selectable', new Selectable()); // ‚≠ê C√≥ th·ªÉ click ƒë·ªÉ ch·ªçn ho·∫∑c t·∫•n c√¥ng
        this.ecsWorld.addComponent(entityId, 'entityType', new EntityType('animal')); // ‚≠ê NEW: Animal type
        this.ecsWorld.addComponent(entityId, 'animation', new Animation('animal', 'idle', 'down')); // ‚≠ê NEW: Animation
        
        console.log(`üêó Created animal at (${x}, ${y}) with ${meatAmount} meat`);
        return entityId;
    }

    // ‚≠ê T·∫†O ƒê∆†N V·ªä C√ì TH·ªÇ THU HO·∫†CH
    
}